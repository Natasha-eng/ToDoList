{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","stories/utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","settings","withCredentials","headers","instance","axios","create","baseURL","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","authApi","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedIn","value","type","status","isInitialized","AddItemForm","React","memo","addItem","disabled","console","log","useState","newTitle","setNewTitle","setError","addItemHandler","trim","TextField","variant","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","props","editMode","setEditMode","setTitle","onBlur","autoFocus","onDoubleClick","changeTaskEntityStatusAC","entityStatus","changeTaskTC","domainModel","getState","task","tasks","find","t","apiModel","startDate","priority","description","deadline","then","res","resultCode","updateTaskAC","catch","warn","Task","toDoListId","useDispatch","className","Completed","Checkbox","checked","New","newValue","thunk","removeTaskAC","Delete","TodoList","demo","useEffect","todolist","setTasksAC","items","useSelector","state","addTask","useCallback","item","addTaskTC","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeToDoList","changeToDoListTitle","tasksForToDoList","filter","map","Button","size","TodolistsList","todoLists","auth","todolists","newFilterValue","todoListID","action","removeToDoListAC","changeToDoListTitleAC","changeTodolistTitleTC","addToDoList","addTodolistTC","Grid","container","style","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","errors","email","test","password","initialValues","rememberMe","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","stateCopy","forEach","ts","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8523ad54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"211feec0-1855-4be6-873e-e36e9bb0fc77\"\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`, settings);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>(`auth/me`)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype _CreateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {\r\n        item: TodolistType\r\n    }\r\n}\r\n\r\ntype _DeleteUpdateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: {}\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {setAppErrorAC, setAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../../api/todolists-api\"\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<setAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<setAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {authApi, LoginParamType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../stories/utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const setIsLoggedIn = (value: boolean) => {\r\n    return {type: 'login/SET-IS-LOGGED-IN', value} as const\r\n}\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamType) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authApi.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authApi.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n//types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | setAppErrorActionType>","import {Dispatch} from \"redux\";\r\nimport {authApi} from \"../api/todolists-api\";\r\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../stories/utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\n//thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authApi.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    //если произойдет какая-то глобальная ошибка - то мы запишем текст ошибки сюда\r\n    error: null | string\r\n    // true когда приложение проинициализировалось\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type setAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\ntype ActionsType =\r\n    setAppErrorActionType |\r\n    SetAppStatusActionType |\r\n    ReturnType<typeof setAppInitializedAC>","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../stories/utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state];\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl);\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl);\r\n\r\n        case 'CHANGE_TODOLIST_ENTITY_STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl);\r\n\r\n        case 'SET_TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}));\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeToDoListAC = (id: string) => ({type: 'REMOVE-TODOLIST', id}) as const\r\nexport const addToDoListAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist}) as const\r\nexport const changeToDoListTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n}) as const\r\nexport const changeToDoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    id,\r\n    filter\r\n}) as const\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET_TODOLISTS', todolists}) as const\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE_TODOLIST_ENTITY_STATUS',\r\n    id,\r\n    status\r\n}) as const\r\n\r\n//thunks\r\nexport const fetchTodolistsThunkCreator = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeToDoListAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 1) {\r\n                dispatch(addToDoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todoListID: string, title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(todoListID, title)\r\n        .then((res) => {\r\n            dispatch(changeToDoListTitleAC(todoListID, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeToDoListTitleAC>\r\n    | ReturnType<typeof changeToDoListFilterAC>\r\n    | SetTodolistActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addToDoListAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeToDoListAC>;\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | setAppErrorActionType>\r\n","import React, {ChangeEvent, useState, KeyboardEvent, useCallback} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    console.log('AddItemForm');\r\n    const [newTitle, setNewTitle] = useState(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        const trimmedTitle = newTitle.trim();\r\n        if (trimmedTitle !== \"\") {\r\n            addItem(newTitle);\r\n            setNewTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField disabled = {disabled} variant={\"outlined\"} label={\"Type value\"} value={newTitle}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler} error={!!error}\r\n                       helperText={error}/>\r\n            <IconButton disabled = {disabled} onClick={addItemHandler} color={\"primary\"}><ControlPoint/></IconButton>\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/> :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n})","import {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType, SetTodolistActionType,\r\n} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../stories/utils/error-utils\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)};\r\n\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            };\r\n\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, ...action.model} : task)\r\n            }\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST':\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = {...state};\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            });\r\n            return stateCopy\r\n        }\r\n\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks.map(ts => ({...ts, entityStatus: \"idle\"}))};\r\n\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(ts => ts.id === action.taskId ? ({\r\n                    ...ts,\r\n                    entityStatus: action.entityStatus\r\n                }) : ts)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return {type: 'UPDATE-TASK', taskId, model, todolistId} as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId} as const\r\n}\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: \"SET-TASKS\", todolistId, tasks} as const\r\n}\r\nexport const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, taskId: string, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-ENTITY-STATUS',\r\n    entityStatus,\r\n    taskId,\r\n    todolistId\r\n}) as const\r\n\r\n\r\n//thunks\r\nexport const fetchTasksThunkCreator = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTaskThunkCreator = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(\"loading\", taskId, todolistId))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(changeTaskEntityStatusAC(\"succeeded\", taskId, todolistId))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | setAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => (dispatch: ThunkDispatch, getState: () => AppRootState) => {\r\n    const state = getState();\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId);\r\n    if (!task) {\r\n        console.warn('task not found in the state');\r\n        return;\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        status: task.status,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        ...domainModel\r\n    }\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTaskEntityStatusAC(\"loading\", taskId, todolistId))\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(changeTaskEntityStatusAC(\"succeeded\", taskId, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            }\r\n        )\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof removeTaskAC> |\r\n    ReturnType<typeof addTaskAC> |\r\n    ReturnType<typeof updateTaskAC> |\r\n    ReturnType<typeof changeTaskTitleAC> |\r\n    ReturnType<typeof setTasksAC> |\r\n    AddTodolistActionType |\r\n    RemoveTodolistActionType |\r\n    SetTodolistActionType |\r\n    ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | setAppErrorActionType>\r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }","import React, {ChangeEvent} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    changeTaskTC,\r\n    removeTaskThunkCreator\r\n} from \"../../tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType, todolistsAPI} from \"../../../../api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n    //taskId\r\n    task: TaskType\r\n    toDoListId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, toDoListId}) => {\r\n    console.log('Task called')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onRemoveHandler = () => {\r\n        const thunk = removeTaskThunkCreator(task.id, toDoListId);\r\n        dispatch(thunk);\r\n    }\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskTC(task.id, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}, toDoListId));\r\n    }\r\n\r\n    const onChangeTitleHandler = (newValue: string) => {\r\n        dispatch(changeTaskTC(task.id, {title: newValue}, toDoListId));\r\n    }\r\n\r\n    return (\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox onChange={onChangeStatusHandler} checked={task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onRemoveHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../../app/store\";\r\nimport {addTaskTC, fetchTasksThunkCreator} from \"../tasks-reducer\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    changeFilter: (newValue: FilterValuesType, todoListID: string) => void\r\n    removeToDoList: (todoListID: string) => void\r\n    changeToDoListTitle: (todoListID: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList: React.FC<PropsType> = React.memo(({demo = false, ...props}: PropsType) => {\r\n    console.log('TodoList called')\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksThunkCreator(props.todolist.id))\r\n    }, []);\r\n\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootState, Array<TaskType>>(state => state.tasks[props.todolist.id]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title, props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(\"all\", props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(\"active\", props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.todolist.id)\r\n    }, [props.changeFilter, props.todolist.id]);\r\n\r\n    const removeToDoList = useCallback(() => {\r\n        props.removeToDoList(props.todolist.id);\r\n    }, [props.removeToDoList, props.todolist.id])\r\n\r\n    const changeToDoListTitle = useCallback((newTitle: string) => {\r\n        props.changeToDoListTitle(props.todolist.id, newTitle)\r\n    }, [props.changeToDoListTitle, props.todolist.id])\r\n\r\n    let tasksForToDoList = tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todolist.title} onChange={changeToDoListTitle}/>\r\n                <IconButton onClick={removeToDoList} disabled = {props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled = {props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(task => <Task\r\n                        task={task} toDoListId={props.todolist.id}\r\n                        key={task.id}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button size={\"small\"} variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button size={\"small\"} color={\"primary\"} variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button size={\"small\"} color={\"secondary\"} variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeToDoListFilterAC, changeTodolistTitleTC,\r\n    fetchTodolistsThunkCreator,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const todoLists = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.todoLists);\r\n    //const tasks = useSelector<AppRootState, TaskStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsThunkCreator())\r\n    }, []);\r\n\r\n\r\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        const action = changeToDoListFilterAC(todoListID, newFilterValue);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeToDoList = useCallback((todoListID: string) => {\r\n        const action = removeTodolistTC(todoListID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeToDoListTitle = useCallback((todoListID: string, newTitle: string) => {\r\n        const thunk = changeTodolistTitleTC(todoListID, newTitle);\r\n        dispatch(thunk);\r\n    }, [dispatch])\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        const action = addTodolistTC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    /*let tasksForToDoList = tasks\r\n    if (filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(task => task.isDone === false)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(task => task.isDone === true)\r\n    }\r\n*/\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"10px\"}}>\r\n            <AddItemForm addItem={addToDoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todoLists.map(tl => {\r\n\r\n                return (\r\n                    <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <TodoList todolist={tl}\r\n                                      changeFilter={changeFilter}\r\n                                      removeToDoList={removeToDoList}\r\n                                      changeToDoListTitle={changeToDoListTitle} demo={demo}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(false);\r\n    const error = useSelector<AppRootState, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n    debounce\r\n} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password should be more than 3 symbols'\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                                               checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status);\r\n    const isInitialized = useSelector<AppRootState, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={\"/ToDoList\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                        <Route path={\"/login\"} render={() => <Login/>}/>\r\n                        <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {createStore, combineReducers,applyMiddleware} from \"redux\";\r\nimport {todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n/*type AppRootState = {\r\n    todoLists: Array<ToDoListType>\r\n    tasks: TaskStateType\r\n}*/\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store = {store}>\r\n    <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}