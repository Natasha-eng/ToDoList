{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","TodoList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","todoListID1","v1","todoListID2","initialState","id","filter","isDone","TodoList","dispatch","useDispatch","tasks","useSelector","state","tasksForToDoList","task","newTitle","changeToDoListTitle","removeToDoList","Delete","taskTitle","todolistId","type","map","className","Checkbox","taskId","checked","newValue","Button","size","changeFilter","AppWithRedux","todoLists","newFilterValue","todoListID","action","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","rootReducer","combineReducers","todoList","find","stateCopy","filteredTasks","t","newTask","newTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.da79d410.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        const trimmedTitle = newTaskTitle.trim();\r\n        if (trimmedTitle !== \"\") {\r\n            props.addItem(newTaskTitle);\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n        setNewTaskTitle(\"\");\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === \"Enter\") {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"} label={\"Type value\"} value={newTaskTitle}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler} error={!!error}\r\n                       helperText={error}/>\r\n            <IconButton onClick={addTask} color={\"primary\"}><ControlPoint/> </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState(\"\");\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/> :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import {FilterValuesType, ToDoListType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveToDoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddToDoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeToDoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeToDoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType =\r\n    RemoveToDoListActionType\r\n    | AddToDoListActionType\r\n    | ChangeToDoListTitleActionType\r\n    | ChangeToDoListFilterActionType\r\n\r\nexport let todoListID1 = v1()\r\nexport let todoListID2 = v1()\r\n\r\nconst initialState: Array<ToDoListType> = [\r\n    {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n    {id: todoListID2, title: \"What to buy\", filter: \"all\"},\r\n]\r\n\r\nexport const todoListsReducer = (state: Array<ToDoListType> = initialState, action: ActionsType): Array<ToDoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state\r\n            ]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todoList = state.find(tl => tl.id === action.id);\r\n            if (todoList) {\r\n                todoList.filter = action.filter;\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeToDoListAC = (todolistId: string): RemoveToDoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\n\r\nexport const addToDoListAC = (todolistTitle: string): AddToDoListActionType => {\r\n    return {type: 'ADD-TODOLIST', title: todolistTitle, todolistId: v1()}\r\n}\r\n\r\nexport const changeToDoListTitleAC = (todolistId: string, todolistTitle: string): ChangeToDoListTitleActionType => {\r\n\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id: todolistId,\r\n        title: todolistTitle\r\n    }\r\n}\r\n\r\nexport const changeToDoListFilterAC = (todolistId: string, todolistFilter: FilterValuesType): ChangeToDoListFilterActionType => {\r\n\r\n    return {\r\n        type: \"CHANGE-TODOLIST-FILTER\",\r\n        id: todolistId,\r\n        filter: todolistFilter\r\n    }\r\n}","import {TaskStateType, TaskType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddToDoListActionType, RemoveToDoListActionType, todoListID1, todoListID2} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    taskTitle: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType |\r\n    AddTaskActionType |\r\n    ChangeTaskStatusActionType |\r\n    ChangeTaskTitleActionType |\r\n    AddToDoListActionType |\r\n    RemoveToDoListActionType;\r\n\r\nconst initialState: TaskStateType = {\r\n    [todoListID1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Redux\", isDone: true},\r\n    ],\r\n    [todoListID2]: [\r\n        {id: v1(), title: \"Dog\", isDone: true},\r\n        {id: v1(), title: \"Cat\", isDone: true},\r\n        {id: v1(), title: \"Horse\", isDone: false},\r\n        {id: v1(), title: \"Rabbit\", isDone: true},\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistId]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTask: TaskType = {id: v1(), title: action.taskTitle, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            /* const stateCopy = {...state};\r\n             const tasks = stateCopy[action.todolistId];\r\n             stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, isDone: action.isDone : t}\r\n             return stateCopy;*/\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(task => {\r\n                    if (task.id !== action.taskId) return task\r\n                    else return {...task, isDone: action.isDone}\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const task = tasks.find(t => t.id === action.taskId)\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\n\r\nexport const addTaskAC = (taskTitle: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', taskTitle, todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./AppWithRedux\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    changeFilter: (newValue: FilterValuesType, todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeToDoList: (todoListID: string) => void\r\n    changeToDoListTitle: (todoListID: string, newTitle: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsType) {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootState, Array<TaskType>>(state => state.tasks[props.id]);\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    };\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    };\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    };\r\n\r\n    const removeToDoList = () => {\r\n        props.removeToDoList(props.id);\r\n    }\r\n\r\n    const changeToDoListTitle = (newTitle: string) => {\r\n        props.changeToDoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    let tasksForToDoList = tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(task => task.isDone === false)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(task => task.isDone === true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeToDoListTitle}/>\r\n                <IconButton onClick={removeToDoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={(title)=> {\r\n                dispatch(addTaskAC(title, props.id))\r\n            }}/>\r\n            <div>\r\n                {\r\n                    tasksForToDoList.map(task => {\r\n                        const onRemoveHandler = () => dispatch(removeTaskAC(task.id, props.id))\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            dispatch(changeTaskStatusAC(task.id, e.currentTarget.checked, props.id));\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            dispatch(changeTaskTitleAC(task.id, newValue, props.id));\r\n                        }\r\n                        return (\r\n                            <div key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n                                <Checkbox onChange={onChangeStatusHandler} checked={task.isDone}/>\r\n                                <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n                                <IconButton onClick={onRemoveHandler}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button size={\"small\"} variant={props.filter == \"all\" ? \"contained\" : \"text\"}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button size={\"small\"} color={\"primary\"} variant={props.filter == \"active\" ? \"contained\" : \"text\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button size={\"small\"} color={\"secondary\"} variant={props.filter == \"completed\" ? \"contained\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addToDoListAC,\r\n    changeToDoListFilterAC,\r\n    changeToDoListTitleAC,\r\n    removeToDoListAC,\r\n    todoListsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch();\r\n    const todoLists = useSelector<AppRootState, Array<ToDoListType>>(state => state.todoLists);\r\n\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const action = changeToDoListFilterAC(todoListID, newFilterValue);\r\n        dispatch(action);\r\n    }\r\n\r\n\r\n\r\n    function removeToDoList(todoListID: string) {\r\n        const action = removeToDoListAC(todoListID);\r\n        dispatch(action);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeToDoListTitle(todoListID: string, newTitle: string) {\r\n        const action = changeToDoListTitleAC(todoListID, newTitle);\r\n        dispatch(action);\r\n    }\r\n\r\n    function addToDoList(title: string) {\r\n        const action = addToDoListAC(title);\r\n        dispatch(action);\r\n        dispatch(action);\r\n    }\r\n\r\n    /*let tasksForToDoList = tasks\r\n    if (filter === \"active\") {\r\n        tasksForToDoList = tasks.filter(task => task.isDone === false)\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForToDoList = tasks.filter(task => task.isDone === true)\r\n    }\r\n*/\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm addItem={addToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList key={tl.id} id={tl.id} title={tl.title}\r\n                                              changeFilter={changeFilter}\r\n                                              filter={tl.filter} removeToDoList={removeToDoList}\r\n                                              changeToDoListTitle={changeToDoListTitle}/>\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {createStore, combineReducers} from \"redux\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\n/*type AppRootState = {\r\n    todoLists: Array<ToDoListType>\r\n    tasks: TaskStateType\r\n}*/\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store = {store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}